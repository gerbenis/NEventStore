//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NEventStore.Persistence.Sql.SqlDialects {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class MsSqlStatements {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MsSqlStatements() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NEventStore.Persistence.Sql.SqlDialects.MsSqlStatements", typeof(MsSqlStatements).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///IF EXISTS(SELECT * FROM sysobjects WHERE name=&apos;Constraints&apos; AND xtype = &apos;U&apos;) RETURN;
        ///CREATE TABLE [dbo].[Constraints](
        ///	[BucketId] [varchar](40) NOT NULL,
        ///	[StreamId] [char](40) NOT NULL,
        ///	[UniquePayload] [varchar](800) NOT NULL,
        ///	[UniqueConstraintName] [varchar](60) NOT NULL,
        /// CONSTRAINT [PK_Constraints] PRIMARY KEY CLUSTERED 
        ///(
        ///	[BucketId] ASC,
        ///	[StreamId] ASC,
        ///	[UniqueConstraintName] ASC
        ///),
        /// CONSTRAINT [UC_Constraints_UniquePayload] UNIQUE NONCLUSTERED 
        ///(
        ///	[UniquePayload] ASC,
        ///	[BucketId [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InitializeStorage {
            get {
                return ResourceManager.GetString("InitializeStorage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WITH [cte] AS
        ///   ( {0}, ROW_NUMBER() OVER ({1}) AS [row] {2} )
        ///
        ///SELECT *
        ///  FROM [cte]
        /// WHERE [row] BETWEEN @Skip + 1
        ///                 AND @Limit + @Skip;.
        /// </summary>
        internal static string PagedQueryFormat {
            get {
                return ResourceManager.GetString("PagedQueryFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET NOCOUNT ON;
        ///SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
        ///BEGIN TRANSACTION CommitTran;
        ///BEGIN TRY
        ///	IF (@UniquePayload0 IS NOT NULL)
        ///	BEGIN
        ///		   UPDATE Constraints
        ///		   SET UniquePayload = @UniquePayload0
        ///		   WHERE BucketId = @BucketId AND UniqueConstraintName = @UniqueConstraintName0 AND StreamId = @StreamId;
        ///
        ///       IF @@rowcount = 0
        ///		   BEGIN
        ///              INSERT INTO Constraints (BucketId, StreamId, UniquePayload, UniqueConstraintName) values (@BucketId, @StreamId, @UniquePayload0, @Uni [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PersistCommits {
            get {
                return ResourceManager.GetString("PersistCommits", resourceCulture);
            }
        }
    }
}
